@using Microsoft.JSInterop
@inject IJSRuntime jsRuntime
@{
    ViewData["Title"] = "Home Page";
    Layout = "_Layout";
}


<div style="background-color: azure; border: 2px solid #14477d; text-align: center;">
    <h2>X360</h2>
    <p>Connect with your data</p>
</div>
<div id="accordion">
    <h3> Data Endpoints</h3>
    @for (var queryindex = 0; queryindex < Model.QueryCalls.Count; queryindex++)
    {
        var querycall = Model.QueryCalls[queryindex];
        var queryid = "query-" + queryindex.ToString("00");
        var queryparms = "parms-" + queryindex.ToString("00");
        var btnid = "btn-" + queryindex.ToString("00");
        var collapse = "collapse" + queryindex.ToString("00");
        var collapseLink = "#" + collapse;

        <div class="card">
            <div class="card-header">
                <a class="btn" data-bs-toggle="collapse" style="padding-top: 0; padding-bottom: 0" href=@collapseLink>
                    <div style="color: white; font-size: 16px">
                        @querycall.Name
                    </div>
                </a>
            </div>
            <div id=@collapse class="collapse" data-bs-parent="#accordion">
                <div class="card-body">
                  @if (querycall.Parameters.Count > 0)
                        {
                            <h4>Parameters</h4>
                        }
                       @for (var paraindex = 0; paraindex < querycall.Parameters.Count; paraindex++)
                            {
                                var i = paraindex;
                                var classname = "txt-" + queryindex.ToString("00");
                                var paramid = classname + "-" + paraindex.ToString("00");
                                int count = querycall.Parameters.Count;
                                var parameter = querycall.Parameters[paraindex];

                                <div style="padding-bottom: 20px">
                                    <input type="text" class=@classname id=@paramid placeholder=@parameter.Name onchange="UpdateQuery(this)"/>
                                </div>
                            }
                        

                    <div style="padding-bottom: 20px">
                        @if (querycall.Parameters.Count > 0)
                        {
                            <span style="padding-right: 25px">
                                <button class="@btnid" onclick="Copy(this)">
                                    <h4>Copy</h4>
                                </button>
                            </span>
                            <span style="padding-right: 25px">
                                <button class="@btnid" onclick="Paste(this)">
                                    <h4>Paste</h4>
                                </button>
                            </span>
                        }
                        <span style="padding-right: 25px">
                            <button class="@btnid" onclick="GetQuery(this)">
                                <h4>GetQuery</h4>
                            </button>
                        </span>
                        <button class="@btnid" onclick="GetData(this)">
                            <h4>GetData</h4>
                        </button>
                    </div>
                    <div id=@queryid style="border-style: solid; font-size: 20px; font-weight: bold">@Model.BaseUrl/API/GETTERDATA/@querycall.Name/<label id=@queryparms></label></div>
                </div>


            </div>

        </div>
    }
</div>

<footer>
    <div style="background-color: #5f5f5f; text-align: left; color: white">
        @Model.VersionString
        <span style="float: right">@Model.UserName</span>
    </div>
</footer>


<script src="https://code.jquery.com/jquery-3.6.1.min.js" integrity="sha256-o88AwQnZB+VDvE9tvIXrMQaPlFFSUTR+nldQm1LuPXQ=" crossorigin="anonymous"></script>
<script>
    var acc = document.getElementsByClassName("accordion");
    var i;
    for (i = 0; i < acc.length; i++) {
        acc[i].addEventListener("click",
            function() {
                this.classList.toggle("active");
                var panel = this.nextElementSibling;
                if (panel.style.maxHeight) {
                    panel.style.maxHeight = null;
                } else {
                    panel.style.maxHeight = panel.scrollHeight + "px";
                }
            }
        );
    }

    function Copy(element) {
        var searchstring = "#" + element.className.replace("btn", "query");
        var text = jQuery(searchstring)[0].innerText;
        if (navigator.clipboard) {
            appCopytoClipBoard(text);
            alert(text + " Copied");
        }
    }

    function Paste(element) {
        var searchstring = "#" + element.className.replace("btn", "txt");
        try {
            if (navigator.clipboard) {
                navigator.permission.query({ name: "clipboard-read" }).then((result) => {
                    if (result.state == "granted" || result.state == "prompt") {
                        navigator.clipboard.readText().then((copiedText) => {
                                var items = copiedText.split("\n");
                                for (let i = 0; i < items.length; i++) {
                                    var key = searchstring + "-" + i.toString().padStart(2, 0);
                                    $(key).valueOf(items[i]);
                                }
                                UpdateQuery(element);
                            }
                        );
                    } else {
                        alert("Clipboard method not permitted");
                    }
                });


            } else {
                alert("fail");
            }
        } catch (err) {
            alert("error:" + err);
        }
    }

    function GetData(element) {
        var searchstring = "#" + element.className.replace("btn", "query");
        var text = jQuery(searchstring)[0].innerText;
        var w = window.open(text);
        /*w.document.title = 'X2';
        w.document.write('<title>My PDF File Title</title>');*/
    }

    function GetQuery(element) {
        var searchstring = "#" + element.className.replace("btn", "query");
        var text = jQuery(searchstring)[0].innerText;
        window.open(text);
    }

    function appCopyToClipBoard(sText) {
        var oText = false;
        bResult = false;
        try {
            oText = document.createElement("textarea");
            $(oText).addClass('ClipboardCopier').val(sText).insertChildAfter('body').focus();
            $oText.select();
            document.execCommand("Copy");
            bResult = true;
        } catch (e) {
            $(oText).remove();
            return bResult;
        }
    }

    function right(str, chr) {
        return str.slice(-(chr));
    }

    function UpdateQuery(element) {
        var id = element.className.slice(-3);
        var txtelement = "txt" + id;
        var searchstring = "." + txtelement;
        var count = jQuery(searchstring).length;
        var url = "";
        for (let i = 0; i < count; i++) {
            searchstring = "#" + txtelement + "-" + ('00' + i).slice(-2);
            url = url + "~" + jQuery(searchstring).val();
        }
        searchstring = "#parms" + id;
        jQuery(searchstring).html(url.substring(1));
    }

</script>